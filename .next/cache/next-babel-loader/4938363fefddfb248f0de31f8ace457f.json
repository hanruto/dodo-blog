{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _Object$assign from \"@babel/runtime-corejs2/core-js/object/assign\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport axios from 'axios';\nimport qs from 'qs';\nexport default {\n  state: {\n    blogList: {\n      list: [],\n      count: 0,\n      page: 1,\n      perPage: 30\n    },\n    currentBlog: {}\n  },\n  reducers: {\n    setBlogList(state, blogList) {\n      return _objectSpread({}, state, {\n        blogList\n      });\n    },\n\n    setBlog(state, currentBlog) {\n      return _objectSpread({}, state, {\n        currentBlog\n      });\n    }\n\n  },\n  effects: dispatch => ({\n    async getBlogList(options) {\n      const params = options || {\n        perPage: 200,\n        page: 1,\n        tags: []\n      };\n\n      _Object$assign(params, {\n        type: 1\n      });\n\n      const blogs = await axios.get('/articles', {\n        params,\n        paramsSerializer: params => {\n          return qs.stringify(params, {\n            arrayFormat: 'repeat'\n          });\n        }\n      });\n      dispatch.blogModel.setBlogList(blogs);\n      return blogs;\n    },\n\n    async getBlog(id) {\n      const currentBlog = await axios.get(`/articles/${id}`);\n      dispatch.blogModel.setBlog(currentBlog);\n    }\n\n  })\n};","map":{"version":3,"sources":["/Users/qm/project/dodo-blog-v2/store/blog-model.ts"],"names":["axios","qs","state","blogList","list","count","page","perPage","currentBlog","reducers","setBlogList","setBlog","effects","dispatch","getBlogList","options","params","tags","type","blogs","get","paramsSerializer","stringify","arrayFormat","blogModel","getBlog","id"],"mappings":";;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,EAAP,MAAe,IAAf;AAQA,eAAe;AACbC,EAAAA,KAAK,EAAE;AACLC,IAAAA,QAAQ,EAAE;AACRC,MAAAA,IAAI,EAAE,EADE;AAERC,MAAAA,KAAK,EAAE,CAFC;AAGRC,MAAAA,IAAI,EAAE,CAHE;AAIRC,MAAAA,OAAO,EAAE;AAJD,KADL;AAQLC,IAAAA,WAAW,EAAE;AARR,GADM;AAYbC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,WAAW,CAACR,KAAD,EAAQC,QAAR,EAAkB;AAC3B,+BAAYD,KAAZ;AAAmBC,QAAAA;AAAnB;AACD,KAHO;;AAKRQ,IAAAA,OAAO,CAACT,KAAD,EAAQM,WAAR,EAAqB;AAC1B,+BAAYN,KAAZ;AAAmBM,QAAAA;AAAnB;AACD;;AAPO,GAZG;AAsBbI,EAAAA,OAAO,EAAEC,QAAQ,KAAK;AACpB,UAAMC,WAAN,CAAkBC,OAAlB,EAA8C;AAC5C,YAAMC,MAAM,GAAGD,OAAO,IAAI;AAAER,QAAAA,OAAO,EAAE,GAAX;AAAgBD,QAAAA,IAAI,EAAE,CAAtB;AAAyBW,QAAAA,IAAI,EAAE;AAA/B,OAA1B;;AAEA,qBAAcD,MAAd,EAAsB;AAAEE,QAAAA,IAAI,EAAE;AAAR,OAAtB;;AAEA,YAAMC,KAAK,GAAG,MAAMnB,KAAK,CAACoB,GAAN,CAAU,WAAV,EAAuB;AACzCJ,QAAAA,MADyC;AAEzCK,QAAAA,gBAAgB,EAAEL,MAAM,IAAI;AAC1B,iBAAOf,EAAE,CAACqB,SAAH,CAAaN,MAAb,EAAqB;AAAEO,YAAAA,WAAW,EAAE;AAAf,WAArB,CAAP;AACD;AAJwC,OAAvB,CAApB;AAOAV,MAAAA,QAAQ,CAACW,SAAT,CAAmBd,WAAnB,CAA+BS,KAA/B;AAEA,aAAOA,KAAP;AACD,KAhBmB;;AAkBpB,UAAMM,OAAN,CAAcC,EAAd,EAAkB;AAChB,YAAMlB,WAAW,GAAG,MAAMR,KAAK,CAACoB,GAAN,CAAW,aAAYM,EAAG,EAA1B,CAA1B;AACAb,MAAAA,QAAQ,CAACW,SAAT,CAAmBb,OAAnB,CAA2BH,WAA3B;AACD;;AArBmB,GAAL;AAtBJ,CAAf","sourcesContent":["import axios from 'axios'\nimport qs from 'qs'\n\ninterface GetBlogListProps {\n  perPage?: number\n  page?: number\n  tags?: string[]\n}\n\nexport default {\n  state: {\n    blogList: {\n      list: [],\n      count: 0,\n      page: 1,\n      perPage: 30,\n    },\n\n    currentBlog: {},\n  },\n\n  reducers: {\n    setBlogList(state, blogList) {\n      return { ...state, blogList }\n    },\n\n    setBlog(state, currentBlog) {\n      return { ...state, currentBlog }\n    },\n  },\n\n  effects: dispatch => ({\n    async getBlogList(options?: GetBlogListProps) {\n      const params = options || { perPage: 200, page: 1, tags: [] }\n\n      Object.assign(params, { type: 1 })\n\n      const blogs = await axios.get('/articles', {\n        params,\n        paramsSerializer: params => {\n          return qs.stringify(params, { arrayFormat: 'repeat' })\n        },\n      })\n\n      dispatch.blogModel.setBlogList(blogs)\n\n      return blogs\n    },\n\n    async getBlog(id) {\n      const currentBlog = await axios.get(`/articles/${id}`)\n      dispatch.blogModel.setBlog(currentBlog)\n    },\n  }),\n}\n"]},"metadata":{},"sourceType":"module"}