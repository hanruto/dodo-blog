{"ast":null,"code":"import _Promise from \"@babel/runtime-corejs2/core-js/promise\";\nvar __jsx = React.createElement;\nimport React, { useRef, useEffect } from 'react';\nimport Router from 'next/router';\nimport { getLetters } from \"../../utils/string-tools\";\nimport \"./index.scss\";\nexport default function Typer(props) {\n  const {\n    content,\n    rendered\n  } = props;\n  const containerRef = useRef(null);\n  let timer = 0;\n\n  const handleType = async () => {\n    const container = containerRef.current;\n    if (!container) return;\n    const letters = getLetters(content);\n    const timeMap = {\n      h1: 200,\n      h2: 120,\n      h3: 100,\n      h4: 100,\n      p: 60\n    }; // const timeMap = { h1: 10, h2: 10, h3: 10, h4: 10, p: 10 }\n\n    let currentLine = null;\n    let currentHref = null;\n\n    for (let i = 0; i < letters.length; i++) {\n      const {\n        type,\n        content,\n        isStart,\n        isEnd,\n        isHrefStart,\n        isHrefEnd,\n        href,\n        isNewTarget\n      } = letters[i];\n      const ms = timeMap[type];\n\n      if (!rendered) {\n        await new _Promise(resolve => timer = window.setTimeout(resolve, ms));\n      }\n\n      if (isStart) {\n        currentLine = document.createElement(type);\n        container.appendChild(currentLine);\n      }\n\n      if (isHrefStart) {\n        currentHref = document.createElement('a');\n\n        if (isNewTarget) {\n          currentHref.setAttribute('href', href);\n          currentHref.setAttribute('target', '_new');\n        } else {\n          currentHref.setAttribute('data-href', href);\n        }\n\n        currentLine.appendChild(currentHref);\n      }\n\n      if (currentHref) {\n        currentHref.innerHTML += content;\n      } else {\n        currentLine.innerHTML += content;\n      }\n\n      if (isHrefEnd) {\n        currentHref = null;\n      }\n\n      if (!rendered && isEnd) {\n        await new _Promise(resolve => timer = window.setTimeout(resolve, ms));\n      }\n    }\n  };\n\n  const handleArchorJump = e => {\n    // @ts-ignore\n    const dataHref = e.target && e.target.getAttribute('data-href');\n\n    if (dataHref) {\n      e.stopPropagation();\n      Router.push(dataHref);\n    }\n  };\n\n  useEffect(() => {\n    handleType();\n    document.addEventListener('click', handleArchorJump);\n    return () => {\n      clearInterval(timer);\n      document.removeEventListener('click', handleArchorJump);\n    };\n  }, []);\n  return __jsx(\"div\", {\n    className: \"c-typer\",\n    ref: containerRef\n  });\n}","map":null,"metadata":{},"sourceType":"module"}