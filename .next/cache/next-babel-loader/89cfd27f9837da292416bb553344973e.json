{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime-corejs2/helpers/esm/objectWithoutProperties\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport * as React from 'react';\nconst defaultSpeed = 600;\nconst defaultInterval = 200;\nexport class Animate extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      animate: false\n    });\n\n    _defineProperty(this, \"timer\", 0);\n  }\n\n  componentDidMount() {\n    if (this.props.animate) {\n      this.timer = setTimeout(() => this.setState({\n        animate: true\n      }));\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.animate !== this.props.animate) {\n      this.timer = window.setTimeout(() => this.setState({\n        animate: this.props.animate\n      }));\n    }\n  }\n\n  componentWillUnmount() {\n    clearTimeout(this.timer);\n  }\n\n  render() {\n    const {\n      children,\n      speed = defaultSpeed,\n      from,\n      to\n    } = this.props;\n    const {\n      animate\n    } = this.state;\n    const additionAnimate = (animate ? to : from) || {};\n    return React.Children.map(children, item => React.cloneElement(item, {\n      style: _objectSpread({}, {\n        transform: `translateY(${animate ? 0 : 40}px)`,\n        transition: `all ease-in-out ${speed / 1000}s`,\n        opacity: animate ? 1 : 0\n      }, {}, additionAnimate)\n    }));\n  }\n\n}\nexport default class AnimateQueue extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"timer\", null);\n\n    _defineProperty(this, \"state\", {\n      current: 0\n    });\n\n    _defineProperty(this, \"handleAnimate\", animate => {\n      const {\n        interval = defaultInterval,\n        children,\n        exit,\n        onAnimateStart\n      } = this.props;\n      if (!children || !children.length) return false;\n      clearTimeout(this.timer);\n\n      if (exit) {\n        return this.setState({\n          current: 0\n        });\n      }\n\n      const loop = () => {\n        let current = this.state.current;\n        const max = children ? children.length : 0;\n\n        if (!animate && current <= 0) {\n          this.setState({\n            current: 0\n          });\n          this.props.onAnimateEnd && this.props.onAnimateEnd();\n          return false;\n        }\n\n        if (animate && current >= max) {\n          this.setState({\n            current: max\n          });\n          this.props.onAnimateEnd && this.props.onAnimateEnd();\n          return false;\n        }\n\n        current = current + (animate ? 1 : -1);\n        this.setState({\n          current\n        });\n        this.timer = setTimeout(loop, interval);\n      };\n\n      onAnimateStart && onAnimateStart();\n      this.timer = setTimeout(loop, interval);\n    });\n  }\n\n  componentDidMount() {\n    this.handleAnimate(this.props.animate);\n  }\n\n  componentDidUpdate(prevProps) {\n    if (!this.props.children || !prevProps.children) {\n      return null;\n    }\n\n    if (prevProps.exit !== this.props.exit) {\n      return this.handleAnimate(this.props.animate);\n    }\n\n    if (prevProps.animate !== this.props.animate) {\n      return this.handleAnimate(this.props.animate);\n    }\n\n    if (prevProps.children.length !== this.props.children.length) {\n      return this.handleAnimate(this.props.animate);\n    }\n  }\n\n  componentWillUnmount() {\n    clearTimeout(this.timer);\n  }\n\n  render() {\n    const _this$props = this.props,\n          {\n      children,\n      speed = 400,\n      animate\n    } = _this$props,\n          rest = _objectWithoutProperties(_this$props, [\"children\", \"speed\", \"animate\"]);\n\n    const {\n      current\n    } = this.state;\n    if (!children) return null;\n    return React.Children.map(children, (item, index) => {\n      return __jsx(Animate, _extends({\n        animate: index < current,\n        speed: speed\n      }, rest), item);\n    });\n  }\n\n}\nexport class AnimateQueueGroup extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      current: 0\n    });\n\n    _defineProperty(this, \"animate\", this.props.animate);\n\n    _defineProperty(this, \"handleNextAnimate\", () => {\n      let {\n        current\n      } = this.state;\n      const {\n        children\n      } = this.props;\n      const max = children ? children.length : 0;\n\n      if (this.animate && current >= max) {\n        current = max;\n      } else if (!this.animate && current <= 0) {\n        current = 0;\n      } else {\n        this.animate ? current = current + 1 : current = current - 1;\n      }\n\n      this.setState({\n        current\n      });\n    });\n  }\n\n  componentDidMount() {\n    this.handleNextAnimate();\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.animate !== this.props.animate) {\n      this.animate = nextProps.animate;\n      this.handleNextAnimate();\n    }\n  }\n\n  render() {\n    const _this$props2 = this.props,\n          {\n      children,\n      speed = 400,\n      animate\n    } = _this$props2,\n          rest = _objectWithoutProperties(_this$props2, [\"children\", \"speed\", \"animate\"]);\n\n    const {\n      current\n    } = this.state;\n    return React.Children.map(children, (item, index) => {\n      return __jsx(\"div\", {\n        className: \"ze-animate-group-wrapper\"\n      }, React.cloneElement(item, _objectSpread({\n        animate: index < current\n      }, rest, {\n        onAnimateEnd: this.handleNextAnimate\n      })));\n    });\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}