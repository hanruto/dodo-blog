{"ast":null,"code":"import _Object$create from \"@babel/runtime-corejs2/core-js/object/create\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _Symbol$replace from \"@babel/runtime-corejs2/core-js/symbol/replace\";\nimport _WeakMap from \"@babel/runtime-corejs2/core-js/weak-map\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _wrapNativeSuper from \"@babel/runtime-corejs2/helpers/esm/wrapNativeSuper\";\n\nfunction _wrapRegExp(re, groups) { _wrapRegExp = function _wrapRegExp(re, groups) { return new BabelRegExp(re, undefined, groups); }; var _RegExp = _wrapNativeSuper(RegExp); var _super = RegExp.prototype; var _groups = new _WeakMap(); function BabelRegExp(re, flags, groups) { var _this = _RegExp.call(this, re, flags); _groups.set(_this, groups || _groups.get(re)); return _this; } _inherits(BabelRegExp, _RegExp); BabelRegExp.prototype.exec = function (str) { var result = _super.exec.call(this, str); if (result) result.groups = buildGroups(result, this); return result; }; BabelRegExp.prototype[_Symbol$replace] = function (str, substitution) { if (typeof substitution === \"string\") { var groups = _groups.get(this); return _super[_Symbol$replace].call(this, str, substitution.replace(/\\$<([^>]+)>/g, function (_, name) { return \"$\" + groups[name]; })); } else if (typeof substitution === \"function\") { var _this = this; return _super[_Symbol$replace].call(this, str, function () { var args = []; args.push.apply(args, arguments); if (typeof args[args.length - 1] !== \"object\") { args.push(buildGroups(args, _this)); } return substitution.apply(this, args); }); } else { return _super[_Symbol$replace].call(this, str, substitution); } }; function buildGroups(result, re) { var g = _groups.get(re); return _Object$keys(g).reduce(function (groups, name) { groups[name] = result[g[name]]; return groups; }, _Object$create(null)); } return _wrapRegExp.apply(this, arguments); }\n\nvar titleRegs = [{\n  type: 'h1',\n  reg: /^# .*$/\n}, {\n  type: 'h2',\n  reg: /^## .*$/\n}, {\n  type: 'h3',\n  reg: /^### .*$/\n}, {\n  type: 'h4',\n  reg: /^#### .*$/\n}];\n\nvar hrefReg = _wrapRegExp(/\\[(.*?)\\]([\\+\\x2D])\\((.*?)\\)/g, {\n  text: 1,\n  isNewTarget: 2,\n  href: 3\n});\n\nexport function getLetters(content) {\n  return content.split('\\n').filter(function (line) {\n    return line !== '';\n  }).map(function (line) {\n    for (var i = 0; i < titleRegs.length; i++) {\n      if (titleRegs[i].reg.test(line)) {\n        return {\n          type: titleRegs[i].type,\n          content: line.replace(/#+ /, '').trim()\n        };\n      }\n    }\n\n    return {\n      type: 'p',\n      content: line\n    };\n  }).map(function (line) {\n    var content = line.content,\n        type = line.type;\n    var hrefInfoArr = [];\n    var blockIndex = 0;\n    content = content.replace(hrefReg, function (matched, text, targetSign, href, searchIndex) {\n      hrefInfoArr.push({\n        start: searchIndex - blockIndex,\n        end: searchIndex + text.length - 1 - blockIndex,\n        href: href,\n        text: text,\n        targetSign: targetSign\n      });\n      blockIndex += matched.length - text.length;\n      return text;\n    });\n    return content.split('').map(function (item, index) {\n      var isHrefStart = false;\n      var isHrefEnd = false;\n      var hrefValue = '';\n      var isNewTarget = false;\n      hrefInfoArr.forEach(function (_ref) {\n        var start = _ref.start,\n            end = _ref.end,\n            href = _ref.href,\n            targetSign = _ref.targetSign;\n        if (index === start) isHrefStart = true;\n        if (index === end) isHrefEnd = true;\n\n        if (index >= start && index <= end) {\n          hrefValue = href;\n          isNewTarget = targetSign === '+';\n        }\n      });\n      return {\n        href: hrefValue,\n        isHrefStart: isHrefStart,\n        isHrefEnd: isHrefEnd,\n        isNewTarget: isNewTarget,\n        type: type,\n        isStart: index === 0,\n        content: item,\n        isEnd: index === content.length - 1\n      };\n    });\n  }) //@ts-ignore\n  .flat();\n}","map":null,"metadata":{},"sourceType":"module"}